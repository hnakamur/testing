worker_processes 2;

events {
  worker_connections  1024;
}

http {
  default_type text/plain;

  sendfile on;
  keepalive_timeout 10;

  lua_package_path '/etc/nginx/?.lua;;';

  lua_shared_dict messages 10m;
  lua_shared_dict locks 10m;

  init_by_lua_block {
    dictsync = require "dictsync"
    cjson = require "cjson"
    ds = dictsync:new{
      channel = "test",  -- redis pubsub channel key
      dict = "messages", -- shared dict name to store data
      lock = "locks",    -- shared dict name to lock
    }
  }

  init_worker_by_lua_block {
    ds:spawn_subscriber()
  }

  # /get?key={key}
  server {
    location = /get {
      set $key $arg_key;
      content_by_lua_block {
        local value = ds:get(ngx.var.key)
        local ok = true
        if not value then
          ok = false
        end

        ngx.say(cjson.encode{
          ok = ok,
          key = value,
        })
      }
    }

    # /set?key={key}&value={val}
    location = /set {
      set $key $arg_key;
      set $val $arg_value;

      content_by_lua_block {
        local pos, n_client, err = ds:set(ngx.var.key, ngx.var.val)
        local ok = true
        if err then
          ok = false
        end

        ngx.say(cjson.encode{
          ok = ok,
          error = err,
          pos = pos,
          n_client = n_client,
        })
      }
    }
  }
}
