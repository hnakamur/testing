worker_processes 2;
user root;

events {
  worker_connections  1024;
}

http {
  default_type text/plain;

  sendfile on;
  keepalive_timeout 10;

  lua_package_path '/etc/nginx/?.lua;;';

  init_by_lua_block {
    redis = require 'resty.redis'
    cjson = require 'cjson'

    function set(key, value)
      local sock = ngx.socket.tcp()
      local ok, err = sock:connect("unix:/tmp/redis.sock")
      if not ok then
        return "failed to connect: " .. err
      end

      local msg = "*3\r\n$3\r\nSET\r\n$" .. #key .. "\r\n" .. key .. "\r\n$" .. #value .. "\r\n " .. value .. "\r\n"
      local bytes, err = sock:send(msg)
      if not bytes then
        return "failed to send: " .. err
      end
      local bytes, err, partial = sock:receive(5)
      if not bytes then
        return "failed to recieve: " .. err
      end

      local ok, err = sock:setkeepalive(60, 100)
      if not ok then
        return "failed to setkeepalive: " .. err
      end

      return bytes
    end
  }

  server {
    # set?key={key}&value={value}
    location = /set {
      set $key $arg_key;
      set $value $arg_value;
      content_by_lua_block {
        local key, value = ngx.var.key, ngx.var.value
        local msg = set(key, value)

        ngx.say(cjson.encode{
          ok = true,
          msg = msg,
          key = key,
          value = value,
        })
      }
    }

    location = /baseline {
      content_by_lua_block {
        ngx.say(cjson.encode{
          ok = "ok",
          err = nil,
          key = "key",
          value = "value",
        })
      }
    }
  }
}
