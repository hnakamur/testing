worker_processes 2;
user root;

events {
  worker_connections  1024;
}

http {
  default_type text/plain;

  sendfile on;
  keepalive_timeout 10;

  lua_package_path '/etc/nginx/?.lua;;';

  lua_shared_dict data 10m;

  init_by_lua_block {
    cjson = require 'cjson'
    shdict = ngx.shared.data

    function set(key, value)
      local ok, err = shdict:set(key, value)
      if not ok then
        return "failed to set: " .. err
      end

      return nil
    end

    function get(key)
      local value = shdict:get(key)
      return value
    end
  }

  server {
    # set?key={key}&value={value}
    location = /set {
      set $key $arg_key;
      set $value $arg_value;
      content_by_lua_block {
        local key, value = ngx.var.key, ngx.var.value
        local err = set(key, value)
        local ok = true
        if err then
          ok = false
        end

        ngx.say(cjson.encode{
          ok = ok,
          err = err,
          key = key,
          value = value,
        })
      }
    }

    # get?key={key}
    location = /get {
      set $key $arg_key;
      content_by_lua_block {
        local key = ngx.var.key
        local value, err = get(key)
        local ok = true
        if err then
          ok = false
        end

        ngx.say(cjson.encode{
          ok = ok,
          err = err,
          key = key,
          value = value,
        })
      }
    }

    location = /baseline {
      content_by_lua_block {
        ngx.say(cjson.encode{
          ok = "ok",
          err = nil,
          key = "key",
          value = "value",
        })
      }
    }

    # NOTE: url is /baselin2 not /baseline2 so that the length
    # of url become the same as /baseline.
    location = /baselin2 {
      content_by_lua_block {
        ngx.say('{"key":"key","ok":"ok","value":"value"}')
      }
    }

    # NOTE: url is /baselin3 not /baseline3 so that the length
    # of url become the same as /baseline.
    location = /baselin3 {
      echo '{"key":"key","ok":"ok","value":"value"}';
    }
  }
}
