worker_processes 2;

events {
  worker_connections  1024;
}


http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  keepalive_timeout 10;

  lua_shared_dict cache_tmp_keys 64m;
  proxy_cache_path /var/lib/nginx/cache levels=1 keys_zone=CACHE:2m max_size=10m inactive=1d;

  server {
    listen 80;
    server_name localhost;

    location / {
      set_by_lua_block $cache_tmp_key {
        local uri = ngx.var.uri;
        local cache_tmp_keys = ngx.shared.cache_tmp_keys
        local value = cache_tmp_keys:get(uri)

        return value
      }

      proxy_cache CACHE;
      proxy_cache_key "$scheme$proxy_host$request_uri $cache_tmp_key";
      proxy_pass http://127.0.0.1:81;
    }

    location /internal/invalidate_cache {
      set $cache_uri $arg_uri;
      set $expire $arg_expire;
      content_by_lua_block {
        local cache_tmp_keys = ngx.shared.cache_tmp_keys
        local cache_uri = ngx.var.cache_uri
        local expire = tonumber(ngx.var.expire)
        local now = ngx.now()
        if expire == nil then
          expire = 60
        end

        local value = ngx.md5(cache_uri .. now)
        success, err, forcible = cache_tmp_keys:set(cache_uri, value, tonumber(expire))

        ngx.say("uri:" .. tostring(cache_uri))
        ngx.say("value:" .. value)
        ngx.say("success:" .. tostring(success))
        ngx.say("err:" .. tostring(err))
        ngx.say("forcible:" .. tostring(forcible))
      }
    }
  }

  server {
    listen 81;

    location / {
      content_by_lua_block {
        ngx.header.cache_control = "max-age=100"
        ngx.say(tostring(ngx.now()))
      }
    }
  }
}
